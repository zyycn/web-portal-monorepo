import type { Plugin, ViteDevServer } from 'vite'

import { ChildProcess, spawn } from 'child_process'
import { consola } from 'consola'
import dayjs from 'dayjs'
import { find } from 'es-toolkit/compat'
import { Server } from 'http'
import { Socket, Server as WebSocketServer } from 'socket.io'
import kill from 'tree-kill-promise'

interface PluginConfig {
  apps: App[]
  verbose?: boolean
}

type UpdateApp = Omit<App, 'appCommand' | 'appPort'> & {
  appCommand?: App['appCommand']
  appPort?: App['appPort']
}

export function vitePluginAppMonitor(options: PluginConfig): Plugin {
  const state = {
    apps: [] as App[],
    checkInterval: null as NodeJS.Timeout | null,
    httpServer: null as null | Server,
    processes: new Map<number, ChildProcess>(), // Ë∑üË∏™ËøõÁ®ãIDÂíåÂ∫îÁî®Áä∂ÊÄÅÁöÑÊò†Â∞Ñ
    wsServer: null as null | WebSocketServer
  }

  const { apps = [], verbose = false } = options
  apps.forEach(app => {
    state.apps.push({
      ...app,
      pid: null,
      status: 'stopped',
      timestamp: dayjs().format('YYYY-MM-DD HH:mm:ss')
    })
  })

  const log = (message: string) => {
    if (!verbose) return
    consola.log(`üöÄ [Vite Plugin App Monitor] ${message}`)
  }

  const startPortChecking = () => {
    if (state.checkInterval) {
      clearInterval(state.checkInterval)
    }

    state.checkInterval = setTimeout(async () => {
      for (const app of state.apps) {
        try {
          const controller = new AbortController()
          const timeoutId = setTimeout(() => controller.abort(), 500)
          const response = await fetch(`http://localhost:${app.appPort}`, {
            signal: controller.signal
          })
          clearTimeout(timeoutId)

          if (response && response.status < 500) {
            if (app.status !== 'running') {
              log(`Â∫îÁî® ${app.appName} Â∑≤ÂêØÂä®`)

              updateApp({
                appName: app.appName,
                status: 'running'
              })

              // ÂπøÊí≠Áä∂ÊÄÅÊõ¥Êñ∞
              if (state.wsServer) {
                state.wsServer.emit('status-update', app)
              }
            }
          }
        } catch {
          // ËøûÊé•Â§±Ë¥•ÔºåÂ∫îÁî®ÂèØËÉΩÊú™ËøêË°å
          if (app.status !== 'stopped' && app.status !== 'starting') {
            log(`Â∫îÁî® ${app.appName} Â∑≤ÂÅúÊ≠¢`)

            updateApp({
              appName: app.appName,
              status: 'stopped'
            })

            // ÂπøÊí≠Áä∂ÊÄÅÊõ¥Êñ∞
            if (state.wsServer) {
              state.wsServer.emit('status-update', app)
            }
          }
        }
      }

      startPortChecking()
    }, 1000)
  }

  const handleError = (app: App, child: ChildProcess) => {
    state.processes.delete(child.pid || 0)

    // Êõ¥Êñ∞Áä∂ÊÄÅ
    updateApp({
      appName: app.appName,
      pid: null,
      status: 'stopped'
    })

    // Êõ¥Êñ∞ÁºìÂ≠ò
    const findApp = find(state.apps, { appName: app.appName })
    if (findApp) Object.assign(findApp, app)

    // ÂπøÊí≠Áä∂ÊÄÅÊõ¥Êñ∞
    state.wsServer?.emit('status-update', app)
  }

  const updateApp = (app: UpdateApp) => {
    const findApp = find(state.apps, { appName: app.appName })

    const timestamp = dayjs().format('YYYY-MM-DD HH:mm:ss')
    if (findApp) Object.assign(findApp, { ...app, timestamp })
  }

  return {
    // Êèí‰ª∂ÂÖ≥Èó≠Êó∂Ê∏ÖÁêÜËµÑÊ∫ê
    async closeBundle() {
      if (state.checkInterval) {
        clearInterval(state.checkInterval)
        state.checkInterval = null
      }

      // ÂÖ≥Èó≠ÊâÄÊúâËøêË°å‰∏≠ÁöÑÂ∫îÁî®
      for (const { appName, pid } of state.apps) {
        try {
          if (pid) await kill(pid)
          log(`Â∑≤ÁªàÊ≠¢Â∫îÁî® ${appName} (PID: ${pid})`)
        } catch {
          log(`ÁªàÊ≠¢Â∫îÁî® ${appName} Â§±Ë¥•Ôºö`)
        }
      }
      state.processes.clear()

      if (state.wsServer) {
        state.wsServer.close()
        state.wsServer = null
      }
    },

    configureServer(server: ViteDevServer) {
      state.httpServer = server.httpServer as Server

      // ÂàõÂª∫WebSocketÊúçÂä°Âô®
      state.wsServer = new WebSocketServer(state.httpServer, {
        path: '/_app-monitor-ws',
        serveClient: false
      })

      // Â§ÑÁêÜWebSocketËøûÊé•
      state.wsServer.on('connection', (socket: Socket) => {
        // ÂèëÈÄÅÂΩìÂâçÊâÄÊúâÂ∫îÁî®Áä∂ÊÄÅ
        socket.emit('app-list', state.apps)

        // ÁõëÂê¨ÂêØÂä®Â∫îÁî®ÂëΩ‰ª§
        socket.on('start-app', (appName: App['appName']) => {
          // Ê∑ªÂä†Âà∞ÁºìÂ≠ò
          const app = find(state.apps, { appName })
          if (!app) return

          if (app.status === 'running' || app.status === 'starting') {
            // Â¶ÇÊûúÂ∫îÁî®Â∑≤ÁªèÂú®ËøêË°åÔºåÂøΩÁï•ÂêØÂä®ËØ∑Ê±Ç
            log(`Â∫îÁî® ${app.appName} Â∑≤Âú®ËøêË°åÔºåÂøΩÁï•ÂêØÂä®ËØ∑Ê±Ç`)
            return
          }

          // Êõ¥Êñ∞Áä∂ÊÄÅ‰∏∫ starting
          updateApp({
            appName: app.appName,
            status: 'starting'
          })

          log(`Ê≠£Âú®ÂêØÂä®Â∫îÁî® ${app.appName}...`)

          // ÂπøÊí≠Áä∂ÊÄÅÊõ¥Êñ∞
          socket.emit('status-update', app)

          try {
            // ÊâßË°åÂëΩ‰ª§Ôºå‰ΩøÁî® inherit Â∞ÜËæìÂá∫Áõ¥Êé•‰º†ÈÄíÂà∞Áà∂ËøõÁ®ã
            const child = spawn(app.appCommand, {
              detached: process.platform !== 'win32', // Âú®ÈùûWindowsÂπ≥Âè∞‰ΩøÂ≠êËøõÁ®ãÁã¨Á´ã
              shell: true,
              stdio: 'inherit'
            })

            // ‰øùÂ≠òËøõÁ®ãID
            app.pid = child.pid
            if (child.pid) state.processes.set(child.pid, child)

            // ÁõëÂê¨ËøõÁ®ãÈÄÄÂá∫
            child.on('close', () => {
              handleError(app, child)
            })

            child.on('error', () => {
              log(`ÂêØÂä®Â∫îÁî® ${app.appName} Â§±Ë¥•:`)
              handleError(app, child)
            })
          } catch {
            log(`ÂêØÂä®Â∫îÁî® ${app.appName} ÂºÇÂ∏∏:`)

            const child = state.processes.get(app.pid || 0)
            if (child) handleError(app, child)
          }
        })

        // ÁõëÂê¨ÂÅúÊ≠¢Â∫îÁî®ÂëΩ‰ª§
        socket.on('stop-app', async (appName: string) => {
          const app = find(state.apps, { appName })
          if (!app || !app.pid) return

          try {
            // ÁªàÊ≠¢ËøõÁ®ã
            log(`Ê≠£Âú®ÂÅúÊ≠¢Â∫îÁî® ${appName} (PID: ${app.pid})...`)

            await kill(app.pid)

            updateApp({
              appName: app.appName,
              pid: null,
              status: 'stopped'
            })

            log(`Â∑≤ÂÅúÊ≠¢Â∫îÁî® ${appName} (PID: ${app.pid})`)
          } catch {
            log(`ÂÅúÊ≠¢Â∫îÁî® ${appName} Â§±Ë¥•Ôºö`)
          }
        })
      })

      startPortChecking()
    },

    name: 'vite-plugin-app-monitor'
  }
}
